plugins {
    id 'java'
    id 'antlr'
    id 'org.jetbrains.kotlin.jvm'
    id 'maven-publish'
}

test {
    useJUnitPlatform()
}

generateGrammarSource {
    arguments += ['-package', 'me.danwi.sqlex.parser', '-Xexact-output-dir']

    doLast {
        def parserPackagePath = "${outputDirectory.getCanonicalPath()}/me/danwi/sqlex/parser"

        file(parserPackagePath).mkdirs()

        copy {
            from(outputDirectory.getCanonicalPath())
            into(parserPackagePath)
            include("SqlEx*")
        }

        delete(fileTree(outputDirectory.getCanonicalPath()) {
            include("SqlEx*")
        })
    }
}

compileKotlin.dependsOn generateGrammarSource
compileTestKotlin.dependsOn generateTestGrammarSource

dependencies {
    implementation project(":common")
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "net.java.dev.jna:jna:5.10.0"
    implementation "com.google.code.gson:gson:2.9.0"
    implementation "org.yaml:snakeyaml:1.30"
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'com.squareup:javapoet:1.13.0'
    antlr("org.antlr:antlr4:4.9.3")

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
}

//使用自定义任务来生成sourcesJar,排除掉resources下的原生库文件
task('sourcesJar', type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    exclude("**/*.dylib")
    exclude("**/*.dll")
    exclude("**/*.so")
    exclude("**/*.h")
}