plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10' apply false
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

//加载全局的local.properties
def globalProperties = new Properties()
//判断是否为RELEASE环境
if (System.getenv("RELEASE") != null) {
    globalProperties.put("release", true)
    globalProperties.put("development", false)
} else {
    globalProperties.put("release", false)
    globalProperties.put("development", true)
}
def globalLocalFile = project.file('local.properties')
if (globalLocalFile.isFile()) {
    globalProperties.load(globalLocalFile.newDataInputStream())
}
ext.localProperties = globalProperties

//所有项目应用
allprojects {
    //本地属性相关
    it.ext.localProperties = globalProperties.clone()
    def localFile = it.file('local.properties')
    if (localFile.isFile()) {
        it.ext.localProperties.load(localFile.newDataInputStream())
    }

    group 'me.danwi.sqlex'
    version '0.0.6'

    //开发环境,版本统一添加SNAPSHOT
    if (localProperties.development)
        version = version + '-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    project.afterEvaluate {
        if (pluginManager.hasPlugin("java")) {
            compileJava {
                sourceCompatibility = 1.8
                targetCompatibility = 1.8
                options.encoding = "UTF-8"
            }
            java {
                withJavadocJar()
                withSourcesJar()
            }
            javadoc {
                options.encoding = 'UTF-8'
                options.charSet = 'UTF-8'
            }
        }
        if (pluginManager.hasPlugin("groovy")) {
            compileGroovy {
                sourceCompatibility = 1.8
                targetCompatibility = 1.8
            }
        }
        if (pluginManager.hasPlugin("org.jetbrains.kotlin.jvm")) {
            compileKotlin {
                kotlinOptions.jvmTarget = "1.8"
                kotlinOptions.freeCompilerArgs = ['-Xjvm-default=compatibility']
            }
            compileTestKotlin {
                kotlinOptions.jvmTarget = "1.8"
                kotlinOptions.freeCompilerArgs = ['-Xjvm-default=compatibility']
            }
        }
        //如果配置了maven-publish插件,且不是gradle插件项目(需要自定义发布),则自动填充相关配置
        if (pluginManager.hasPlugin("maven-publish") && !pluginManager.hasPlugin("java-gradle-plugin")) {
            publishing {
                publications {
                    Java(MavenPublication) {
                        if (pluginManager.hasPlugin("com.github.johnrengelman.shadow"))
                            project.shadow.component(it)
                        else
                            from components.java
                        pom {
                            name = project.name
                            description = "sqlex ${project.name} component"
                            url = 'https://github.com/sqlex'
                            scm {
                                connection = 'scm:git:https://github.com/sqlex/sqlex.git'
                                developerConnection = 'scm:git:https://github.com/sqlex/sqlex.git'
                                url = 'https://github.com/sqlex'
                            }
                            licenses {
                                license {
                                    name = 'The Apache License, Version 2.0'
                                    url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }
                            developers {
                                developer {
                                    id = 'sqlex'
                                    name = 'sqlex'
                                    email = 'demon@danwi.me'
                                }
                            }
                        }
                    }
                }
            }
        }
        //如果配置了maven-publish,有签名配置,且没有应用自己的签名插件,则尝试应用全局签名配置
        if (pluginManager.hasPlugin("maven-publish") && localProperties.get("signing.key") != null && !pluginManager.hasPlugin("signing")) {
            pluginManager.apply("signing")
            signing {
                useInMemoryPgpKeys(localProperties.get("signing.key"), localProperties.get("signing.password"))
                publishing.publications.forEach { sign it }
            }
        }
    }
}

//配置全局的maven central属性
if (localProperties.get('ossrh.username')) {
    nexusPublishing {
        repositories {
            sonatype {
                username = localProperties.get("ossrh.username")
                password = localProperties.get("ossrh.password")
            }
        }
    }
}
